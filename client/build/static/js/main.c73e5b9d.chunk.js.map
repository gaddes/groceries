{"version":3,"sources":["serviceWorker.js","Header.js","ShoppingList.js","Home.js","NotFound.js","Router.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","react_default","a","createElement","className","react_router_dom","to","InputBox","props","type","placeholder","onClick","SearchBox","onKeyUp","ListItems","items","currentSearch","filteredItems","filter","item","itemText","desc","indexOf","shoppingListIsBeingEdited","map","index","key","ShoppingList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchItem","searchInput","document","querySelector","value","setState","clearSearch","addItem","inputField","inputContent","axios","post","then","response","console","log","fetchItemsAndUpdateState","catch","error","deleteItem","itemId","state","_id","previousState","delete","data","id","editList","editButtonText","_this2","get","res","_this3","e","Component","Home","Fragment","src_Header","src_ShoppingList","NotFound","Router","react_router","exact","path","component","ReactDOM","render","src_Router","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c73e5b9d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './header.scss';\n\nfunction Header() {\n  return (\n    <div className='header'>\n      <Link className='title' to='/'>\n        <span className='title__text'>Groceries App</span>\n      </Link>\n    </div>\n  );\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './shoppingList.scss';\n// Axios helps us make http requests\nimport axios from 'axios';\n\nfunction InputBox(props) {\n  return (\n    <div className='flex-row'>\n      <input className='item-input' type='text' placeholder='eggs, chicken, pickles...'></input>\n      <button className='item-add' onClick={props.onClick}>Add</button>\n    </div>\n  );\n}\n\nfunction SearchBox(props) {\n  return (\n    <div>\n      <div className='flex-row'>\n        <input className='search-input' type='text' onKeyUp={props.onKeyUp} placeholder='search...'></input>\n        <button onClick={props.onClick}>Clear</button>\n      </div>\n    </div>\n  );\n}\n\nfunction ListItems(props) {\n  const currentSearch = props.currentSearch;\n  let items;\n\n  // Create new array containing only items that include search text\n  const filteredItems = props.items.filter(item => {\n    const itemText = item.desc;\n    if (itemText.indexOf(currentSearch) === -1) {\n      // eslint-disable-next-line\n      return;\n    }\n    return itemText;\n  });\n\n  // Loop through filtered items, add each one to array as <li>\n  if (props.shoppingListIsBeingEdited) {\n    items = filteredItems.map((item, index) =>\n      <li key={index}>{item.desc}<button key={index} onClick={() => props.onClick(index)}>Delete</button></li>\n    );\n  } else {\n    items = filteredItems.map((item, index) =>\n      <li key={index}>{item.desc}</li>\n    );\n  }\n\n  return (\n    <ul className=\"list-items\">\n      {items}\n    </ul>\n  );\n}\n\nclass ShoppingList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shoppingListIsBeingEdited: false,\n      editButtonText: 'Edit',\n      items: [],\n      currentSearch: ''\n    }\n  }\n\n  fetchItemsAndUpdateState() {\n    /**\n     * Fetch items from backend and place them in state\n     *\n     * We could pass only the .desc property into state\n     * But we pass everything, just in case we need to work with\n     * _id or some other property further down the line\n     */\n    axios.get('/items')\n      .then(res => {\n        const items = res.data;\n        this.setState({ items });\n      });\n  };\n\n  componentDidMount() {\n    this.fetchItemsAndUpdateState();\n  }\n\n  /**\n   * This function performs a live search on the shopping list\n   */\n  searchItem = () => {\n    // Set currentSearch in state as the value of the search input box\n    const searchInput = document.querySelector('.search-input').value;\n    this.setState({currentSearch: searchInput});\n  };\n\n  /**\n   * This function clears the search term from state and removes text from the input box\n   */\n  clearSearch = () => {\n    // Clear state\n    this.setState({ currentSearch: '' });\n    // Clear input box\n    document.querySelector(`.search-input`).value = '';\n  };\n\n  /**\n   * This function adds a new item to the list\n   */\n  addItem = () => {\n    // Select value from input box\n    const inputField = document.querySelector(`.item-input`);\n    const inputContent = inputField.value;\n\n    // Check not empty\n    if (inputContent !== '') {\n      // Update state by concatenating previous state with an array containing only the new item\n      // this.setState(previousState => ({ items: previousState.items.concat([{ desc: inputContent }]) }));\n      // Trigger POST request\n      axios.post('/items', {\n        desc: inputContent\n      })\n        .then((response) => {\n          console.log(response);\n          // Fetch and display items (incl. the new one we've just posted)\n          this.fetchItemsAndUpdateState();\n        })\n        .catch((error) => console.log(error));\n\n      // Clear input field\n      inputField.value = '';\n    }\n  };\n\n  /**\n   * This function deletes an item from the list\n   *\n   * @param {integer} index - index of item to be deleted\n   */\n  deleteItem = (index) => {\n    const itemId = this.state.items[index]._id\n    // Update state by filtering previousState so it no longer includes the item corresponding to the clicked delete button\n    this.setState(previousState => ({ items: previousState.items.filter((item, key) => key !== index) }));\n    // Remove from database\n    axios.delete('/items', {\n      // 'data' keyword is required by axios to populate the req.body\n      data: {\n        id: itemId\n      }\n    })\n      .then((response) => console.log(response))\n      .catch((error) => console.log(error));\n  };\n\n  /**\n   * This function sets the state of various attributes,\n   * depending on the state of the edit button\n   */\n  editList = () => {\n    if (this.state.shoppingListIsBeingEdited === false) {\n      this.setState({ shoppingListIsBeingEdited: true });\n      this.setState({ editButtonText: 'Done'});\n    } else {\n      this.setState({ shoppingListIsBeingEdited: false });\n      this.setState({ editButtonText: 'Edit'});\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"shopping-list\">\n        <br/>\n        <SearchBox\n          currentSearch={this.state.currentSearch}\n          onKeyUp={(e) => this.searchItem()}\n          onClick={() => this.clearSearch()}\n        />\n        <div className='flex-row'>\n          <h2>Shopping list</h2>\n          <button\n            className='item-edit'\n            onClick={() => this.editList()}\n          >\n            {this.state.editButtonText}\n          </button>\n        </div>\n        <InputBox\n          onClick={() => this.addItem()}\n        />\n        <ListItems\n          items={this.state.items}\n          shoppingListIsBeingEdited={this.state.shoppingListIsBeingEdited}\n          onClick={(index) => this.deleteItem(index)}\n          currentSearch={this.state.currentSearch}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ShoppingList;","import React from 'react';\nimport Header from './Header';\nimport ShoppingList from './ShoppingList';\nimport './_reset.scss';\n\nfunction Home() {\n  return (\n    <React.Fragment>\n      <Header/>\n      <ShoppingList/>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport './notFound.scss';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <div className='body not-found'>\n          <p className='message'>404 Not Found!</p>\n          <p className='subtext'>\n            The page you requested could not be located.\n          </p>\n          <p className='subtext'>Please check the URL.</p>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport NotFound from \"./NotFound\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Router from './Router';\n\n// ReactDOM.render(<Router />, document.getElementById('root'));\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}